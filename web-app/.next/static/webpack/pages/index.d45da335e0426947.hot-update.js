"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./services/chatApi.ts":
/*!*****************************!*\
  !*** ./services/chatApi.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatApiService: function() { return /* binding */ chatApiService; }\n/* harmony export */ });\nclass ChatApiService {\n    async sendMessage(message, conversationId, onStatusUpdate) {\n        try {\n            var _response_body;\n            // Check if we're in development mode\n            const isDevelopmentMode =  true || 0;\n            const headers = {\n                \"Content-Type\": \"application/json\"\n            };\n            // Add development headers if in development mode\n            if (isDevelopmentMode) {\n                headers[\"X-Development-Mode\"] = \"true\";\n                headers[\"X-Remote-User\"] = \"testuser\"; // Default test user for development\n            }\n            const response = await fetch(\"\".concat(this.baseUrl, \"/api/stream\"), {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify({\n                    message,\n                    conversationId\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const reader = (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.getReader();\n            const decoder = new TextDecoder();\n            let buffer = \"\";\n            if (!reader) {\n                throw new Error(\"No response body\");\n            }\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                buffer += decoder.decode(value, {\n                    stream: true\n                });\n                const lines = buffer.split(\"\\n\");\n                buffer = lines.pop() || \"\";\n                for (const line of lines){\n                    if (line.startsWith(\"data: \")) {\n                        const jsonStr = line.slice(6);\n                        if (jsonStr.trim()) {\n                            try {\n                                const event = JSON.parse(jsonStr);\n                                // Handle status updates\n                                if (event.status === \"loading\" && onStatusUpdate) {\n                                    onStatusUpdate(\"Looking at course content...\");\n                                } else if (event.status === \"thinking\" && onStatusUpdate) {\n                                    onStatusUpdate(\"Thinking...\");\n                                } else if (event.status === \"complete\") {\n                                    return {\n                                        response: event.response,\n                                        rag_context: event.rag_context,\n                                        conversation_id: event.conversation_id,\n                                        health_status: event.health_status\n                                    };\n                                } else if (event.status === \"error\") {\n                                    throw new Error(event.error || \"Unknown error\");\n                                }\n                            } catch (e) {\n                                console.error(\"Error parsing SSE data:\", e);\n                            }\n                        }\n                    }\n                }\n            }\n            throw new Error(\"Stream ended without complete status\");\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n            throw new Error(\"Error generating answer.\");\n        }\n    }\n    async checkHealth() {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/health\"));\n            return await response.json();\n        } catch (error) {\n            console.error(\"Health check failed:\", error);\n            throw error;\n        }\n    }\n    async getHealthStatus() {\n        try {\n            const headers = {};\n            // Add development headers if in development mode\n            const isDevelopmentMode =  true || 0;\n            if (isDevelopmentMode) {\n                headers[\"X-Development-Mode\"] = \"true\";\n                headers[\"X-Remote-User\"] = \"testuser\";\n            }\n            const response = await fetch(\"\".concat(this.baseUrl, \"/health-status\"), {\n                headers\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Health status check failed:\", error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.baseUrl = \"http://127.0.0.1:5000\";\n    }\n}\nconst chatApiService = new ChatApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM1QixFQUFFLE9BQU9KLE9BQU87WUFDZEUsUUFBUUYsS0FBSyxDQUFDLHdCQUF3QkE7WUFDdEMsTUFBTUE7UUFDUjtJQUNGO0lBRUEsTUFBTUssa0JBQXlDO1FBQzdDLElBQUk7WUFDRixNQUFNdEMsVUFBa0MsQ0FBQztZQUV6QyxpREFBaUQ7WUFDakQsTUFBTUosb0JBQW9CQyxLQUF5QixJQUMxQkEsQ0FBaUM7WUFDMUQsSUFBSUQsbUJBQW1CO2dCQUNyQkksT0FBTyxDQUFDLHFCQUFxQixHQUFHO2dCQUNoQ0EsT0FBTyxDQUFDLGdCQUFnQixHQUFHO1lBQzdCO1lBRUEsTUFBTUwsV0FBVyxNQUFNTSxNQUFNLEdBQWdCLE9BQWIsSUFBSSxDQUFDQyxPQUFPLEVBQUMsbUJBQWlCO2dCQUFFRjtZQUFRO1lBQ3hFLElBQUksQ0FBQ0wsU0FBU1ksRUFBRSxFQUFFO2dCQUNoQixNQUFNLElBQUlDLE1BQU0sdUJBQXVDLE9BQWhCYixTQUFTYyxNQUFNO1lBQ3hEO1lBQ0EsT0FBTyxNQUFNZCxTQUFTMEMsSUFBSTtRQUM1QixFQUFFLE9BQU9KLE9BQU87WUFDZEUsUUFBUUYsS0FBSyxDQUFDLCtCQUErQkE7WUFDN0MsTUFBTUE7UUFDUjtJQUNGOzthQXZIUS9CLFVBQVU7O0FBd0hwQjtBQUVPLE1BQU1xQyxpQkFBaUIsSUFBSWpELGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zZXJ2aWNlcy9jaGF0QXBpLnRzPzIwNGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIENoYXRSZXNwb25zZSB7XG4gIHJlc3BvbnNlPzogc3RyaW5nO1xuICBlcnJvcj86IHN0cmluZztcbiAgcmFnX2NvbnRleHQ/OiBzdHJpbmc7XG4gIGNvbnZlcnNhdGlvbl9pZD86IHN0cmluZztcbiAgaGVhbHRoX3N0YXR1cz86IEhlYWx0aFN0YXR1cztcbn1cblxuaW50ZXJmYWNlIFN0cmVhbUV2ZW50IHtcbiAgc3RhdHVzOiAnbG9hZGluZycgfCAndGhpbmtpbmcnIHwgJ2NvbXBsZXRlJyB8ICdlcnJvcic7XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG4gIHJlc3BvbnNlPzogc3RyaW5nO1xuICBlcnJvcj86IHN0cmluZztcbiAgcmFnX2NvbnRleHQ/OiBzdHJpbmc7XG4gIGNvbnZlcnNhdGlvbl9pZD86IHN0cmluZztcbiAgaGVhbHRoX3N0YXR1cz86IEhlYWx0aFN0YXR1cztcbn1cblxuaW50ZXJmYWNlIEhlYWx0aFN0YXR1cyB7XG4gIGN1cnJlbnRfcG9pbnRzOiBudW1iZXI7XG4gIG1heF9wb2ludHM6IG51bWJlcjtcbiAgY2FuX3F1ZXJ5OiBib29sZWFuO1xuICB0aW1lX3VudGlsX25leHRfcmVnZW46IG51bWJlcjtcbn1cblxuY2xhc3MgQ2hhdEFwaVNlcnZpY2Uge1xuICBwcml2YXRlIGJhc2VVcmwgPSBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMFwiO1xuXG4gIGFzeW5jIHNlbmRNZXNzYWdlKFxuICAgIG1lc3NhZ2U6IHN0cmluZywgXG4gICAgY29udmVyc2F0aW9uSWQ6IHN0cmluZyxcbiAgICBvblN0YXR1c1VwZGF0ZT86IChzdGF0dXM6IHN0cmluZykgPT4gdm9pZFxuICApOiBQcm9taXNlPENoYXRSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDaGVjayBpZiB3ZSdyZSBpbiBkZXZlbG9wbWVudCBtb2RlXG4gICAgICBjb25zdCBpc0RldmVsb3BtZW50TW9kZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkRFVkVMT1BNRU5UX01PREUgPT09ICd0cnVlJztcbiAgICAgIFxuICAgICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIEFkZCBkZXZlbG9wbWVudCBoZWFkZXJzIGlmIGluIGRldmVsb3BtZW50IG1vZGVcbiAgICAgIGlmIChpc0RldmVsb3BtZW50TW9kZSkge1xuICAgICAgICBoZWFkZXJzW1wiWC1EZXZlbG9wbWVudC1Nb2RlXCJdID0gXCJ0cnVlXCI7XG4gICAgICAgIGhlYWRlcnNbXCJYLVJlbW90ZS1Vc2VyXCJdID0gXCJ0ZXN0dXNlclwiOyAvLyBEZWZhdWx0IHRlc3QgdXNlciBmb3IgZGV2ZWxvcG1lbnRcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2FwaS9zdHJlYW1gLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICBjb252ZXJzYXRpb25JZCBcbiAgICAgICAgfSksXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHk/LmdldFJlYWRlcigpO1xuICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgICAgbGV0IGJ1ZmZlciA9ICcnO1xuXG4gICAgICBpZiAoIXJlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyByZXNwb25zZSBib2R5XCIpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICBpZiAoZG9uZSkgYnJlYWs7XG5cbiAgICAgICAgYnVmZmVyICs9IGRlY29kZXIuZGVjb2RlKHZhbHVlLCB7IHN0cmVhbTogdHJ1ZSB9KTtcbiAgICAgICAgY29uc3QgbGluZXMgPSBidWZmZXIuc3BsaXQoJ1xcbicpO1xuICAgICAgICBidWZmZXIgPSBsaW5lcy5wb3AoKSB8fCAnJztcblxuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKCdkYXRhOiAnKSkge1xuICAgICAgICAgICAgY29uc3QganNvblN0ciA9IGxpbmUuc2xpY2UoNik7XG4gICAgICAgICAgICBpZiAoanNvblN0ci50cmltKCkpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudDogU3RyZWFtRXZlbnQgPSBKU09OLnBhcnNlKGpzb25TdHIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBzdGF0dXMgdXBkYXRlc1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5zdGF0dXMgPT09ICdsb2FkaW5nJyAmJiBvblN0YXR1c1VwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgb25TdGF0dXNVcGRhdGUoJ0xvb2tpbmcgYXQgY291cnNlIGNvbnRlbnQuLi4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnN0YXR1cyA9PT0gJ3RoaW5raW5nJyAmJiBvblN0YXR1c1VwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgb25TdGF0dXNVcGRhdGUoJ1RoaW5raW5nLi4uJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5zdGF0dXMgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBldmVudC5yZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgICAgcmFnX2NvbnRleHQ6IGV2ZW50LnJhZ19jb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25faWQ6IGV2ZW50LmNvbnZlcnNhdGlvbl9pZCxcbiAgICAgICAgICAgICAgICAgICAgaGVhbHRoX3N0YXR1czogZXZlbnQuaGVhbHRoX3N0YXR1c1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGV2ZW50LmVycm9yIHx8ICdVbmtub3duIGVycm9yJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyBTU0UgZGF0YTonLCBlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJlYW0gZW5kZWQgd2l0aG91dCBjb21wbGV0ZSBzdGF0dXNcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzZW5kaW5nIG1lc3NhZ2U6XCIsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgYW5zd2VyLlwiKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBjaGVja0hlYWx0aCgpOiBQcm9taXNlPHsgc3RhdHVzOiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVybH0vaGVhbHRoYCk7XG4gICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiSGVhbHRoIGNoZWNrIGZhaWxlZDpcIiwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0SGVhbHRoU3RhdHVzKCk6IFByb21pc2U8SGVhbHRoU3RhdHVzPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICAgIFxuICAgICAgLy8gQWRkIGRldmVsb3BtZW50IGhlYWRlcnMgaWYgaW4gZGV2ZWxvcG1lbnQgbW9kZVxuICAgICAgY29uc3QgaXNEZXZlbG9wbWVudE1vZGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5ERVZFTE9QTUVOVF9NT0RFID09PSAndHJ1ZSc7XG4gICAgICBpZiAoaXNEZXZlbG9wbWVudE1vZGUpIHtcbiAgICAgICAgaGVhZGVyc1tcIlgtRGV2ZWxvcG1lbnQtTW9kZVwiXSA9IFwidHJ1ZVwiO1xuICAgICAgICBoZWFkZXJzW1wiWC1SZW1vdGUtVXNlclwiXSA9IFwidGVzdHVzZXJcIjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2hlYWx0aC1zdGF0dXNgLCB7IGhlYWRlcnMgfSk7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJIZWFsdGggc3RhdHVzIGNoZWNrIGZhaWxlZDpcIiwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjaGF0QXBpU2VydmljZSA9IG5ldyBDaGF0QXBpU2VydmljZSgpO1xuZXhwb3J0IHR5cGUgeyBDaGF0UmVzcG9uc2UsIFN0cmVhbUV2ZW50LCBIZWFsdGhTdGF0dXMgfTsgIl0sIm5hbWVzIjpbIkNoYXRBcGlTZXJ2aWNlIiwic2VuZE1lc3NhZ2UiLCJtZXNzYWdlIiwiY29udmVyc2F0aW9uSWQiLCJvblN0YXR1c1VwZGF0ZSIsInJlc3BvbnNlIiwiaXNEZXZlbG9wbWVudE1vZGUiLCJwcm9jZXNzIiwiZW52IiwiREVWRUxPUE1FTlRfTU9ERSIsImhlYWRlcnMiLCJmZXRjaCIsImJhc2VVcmwiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJidWZmZXIiLCJkb25lIiwidmFsdWUiLCJyZWFkIiwiZGVjb2RlIiwic3RyZWFtIiwibGluZXMiLCJzcGxpdCIsInBvcCIsImxpbmUiLCJzdGFydHNXaXRoIiwianNvblN0ciIsInNsaWNlIiwidHJpbSIsImV2ZW50IiwicGFyc2UiLCJyYWdfY29udGV4dCIsImNvbnZlcnNhdGlvbl9pZCIsImhlYWx0aF9zdGF0dXMiLCJlcnJvciIsImUiLCJjb25zb2xlIiwiY2hlY2tIZWFsdGgiLCJqc29uIiwiZ2V0SGVhbHRoU3RhdHVzIiwiY2hhdEFwaVNlcnZpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./services/chatApi.ts\n"));

/***/ })

});